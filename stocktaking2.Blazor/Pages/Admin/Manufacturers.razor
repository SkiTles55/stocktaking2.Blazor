@page "/administration/manufacturers"
@using stocktaking2.Blazor.Data
@using stocktaking2.Blazor.Data.DB
@using System.Security.Claims
@using stocktaking2.Blazor.Helpers
@using Microsoft.AspNetCore.Identity;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> _UserManager
@inject IHeadElementHelper HeadElementHelper
@inherits OwningComponentBase<DbService>
<AuthorizeView>
    <Authorized>
        @if (@context.User.IsInRole("Admin"))
        {
            <div class="d-sm-flex align-items-center justify-content-between mb-4">
                <h1 class="h3 mb-0 text-gray-800">Производители</h1>
                <ul class="nav justify-content-end">
                    <li class="nav-item">
                        <a class="nav-link active" href="/administration/manufacturers" @onclick="AddNewMan"><i class="fas fa-plus fa-sm"></i> Добавить производителя</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="/administration/manufacturers" @onclick="ShowHistoryModal"><i class="fas fa-list fa-sm"></i> История изменений</a>
                    </li>
                </ul>
            </div>
            @if (manPaging == null)
            {
                <PageLoadingSpinner />
            }
            else
            {
                <div class="card shadow mb-4 border-left-primary">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-bordered" id="DataTable" width="100%" cellspacing="0">
                                <thead>
                                    <tr>
                                        <th><a href="administration/manufacturers/" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 1 ? 2 : 1))"><i class="@SortClass(1, 2)"></i> Название</a></th>
                                        <th><a href="administration/manufacturers/" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 3 ? 4 : 3))"><i class="@SortClass(3, 4)"></i> Количество техники</a></th>
                                        <th><a href="administration/manufacturers/" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 5 ? 6 : 5))"><i class="@SortClass(5, 6)"></i> Типы техники</a></th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var one in manPaging.Manufacturers)
                                    {
                                        <tr>
                                            <td>@one.Name</td>
                                            <td><a href="@("/units?manId=" + one.Id)">@one.Units.Count</a></td>
                                            <td>@string.Join(", ", one.Categories.OrderBy(x => x.Category.Name).Select(x => x.Category.Name).ToArray())</td>
                                            <td>
                                                <button class="btn btn-primary btn-circle" title="Редактировать" @onclick="(() => EditMan(one))">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-danger btn-circle" title="Удалить" @onclick="(() => DeleteMan(one))">
                                                    <i class="far fa-trash-alt"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            <div class="d-sm-flex align-items-center justify-content-between">
                                <p>Всего производителей: @manPaging.TotalCount</p>
                                @if (manPaging.TotalPages > 1)
                                {
                                    <ul class="pagination">
                                        @if (HasPrevious())
                                        {
                                            <li class="page-item">
                                                <button class="page-link" @onclick="(()=>SetPage(currentPage - 1))">&laquo;  Назад</button>
                                            </li>
                                        }
                                        else
                                        {
                                            <li class="page-item disabled">
                                                <a class="page-link" aria-disabled="true">&laquo;  Назад</a>
                                            </li>
                                        }
                                        @if (Start > 1)
                                        {
                                            <li class="page-item">
                                                <button class="page-link" @onclick="(()=>SetPage(1))">1</button>
                                            </li>
                                        }
                                        @if (Start > 2)
                                        {
                                            <li class="page-item disabled">
                                                <a class="page-link" aria-disabled="true">...</a>
                                            </li>
                                        }
                                        @for (var i = Start; i <= Finish; i++)
                                        {
                                            var temp = i;
                                            if (i == currentPage)
                                            {
                                                <li class="page-item active">
                                                    <span class="page-link">
                                                        @i
                                                        <span class="sr-only">(current)</span>
                                                    </span>
                                                </li>
                                            }
                                            else
                                            {
                                                <li class="page-item">
                                                    <button class="page-link" @onclick="(()=>SetPage(temp))">@i</button>
                                                </li>
                                            }
                                        }
                                        @if (Finish < manPaging.TotalPages)
                                        {
                                            <li class="page-item disabled">
                                                <a class="page-link" aria-disabled="true">...</a>
                                            </li>
                                        }
                                        @if (Finish < manPaging.TotalPages)
                                        {
                                            <li class="page-item">
                                                <button class="page-link" @onclick="(()=>SetPage(manPaging.TotalPages))">@manPaging.TotalPages</button>
                                            </li>
                                        }
                                        @if (HasNext())
                                        {
                                            <li class="page-item">
                                                <button class="page-link" @onclick="(()=>SetPage(currentPage + 1))">Вперед  &raquo;</button>
                                            </li>
                                        }
                                        else
                                        {
                                            <li class="page-item disabled">
                                                <a class="page-link" aria-disabled="true">Вперед  &raquo;</a>
                                            </li>
                                        }
                                    </ul>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
            <ModalWindow @ref="modal1" Title="@ModalTitle" ModalButtonOK="@ModalButton" OnClick="(() => SaveMan())">
                <div class="form-group">
                    <input class="form-control" type="text" placeholder="Название" @bind="ct.Name" />
                </div>
                @if (!string.IsNullOrEmpty(error))
                {
                    <div class="form-group">
                        <div class="alert alert-danger" role="alert">
                            <i class="fas fa-exclamation-circle"></i> @error
                        </div>
                    </div>
                }
                <div class="form-group">
                    <h4>Типы техники</h4>
                </div>
                <div class="form-group">
                    <div style="overflow: auto; height:240px;">
                        @foreach (var cat in ct.categories)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="@cat.Key" @bind="@ct.categories[cat.Key]" />
                                <label class="form-check-label" for="@cat.Key">
                                    @cat.Key
                                </label>
                            </div>
                        }
                    </div>
                </div>
            </ModalWindow>
            <ModalYesNoDialog @ref="modalYesNo" OnClick="() => Del()" Title="Действительно хотите удалить этого производителя?">
                <div class="form-group">
                    <h3>@forDel.Name</h3>
                </div>
            </ModalYesNoDialog>
            <ModalHistory @ref="modalHistory">
                @if (manufacturersHistories == null)
                {
                    <p>Данные загружаются...</p>
                }
                else
                {
                    @foreach (var cH in manufacturersHistories)
                    {
                        <div class="alert alert-secondary" role="alert">
                            <p>Время: <b>@cH.Time.ToString("dd.MM.yyyy HH:mm")</b></p>
                            <p>Пользователь: <b>@cH.UserName</b></p>
                            <p class="font-weight-bold">@cH.Changes</p>
                        </div>
                    }
                }
            </ModalHistory>
        }
        else
        {
            <p>У вас нет доступа в этот раздел</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>У вас нет доступа в этот раздел</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    ManPaging manPaging;
    List<Category> categories = new List<Category>();
    List<ManufacturerHistory> manufacturersHistories = new List<ManufacturerHistory>();
    ClaimsPrincipal CurrentUser = new ClaimsPrincipal();
    string ModalTitle = "Редактирование производителя";
    string ModalButton = "Сохранить";
    ManForm ct = new ManForm();
    Manufacturer forDel = new Manufacturer();
    ModalWindow modal1;
    ModalYesNoDialog modalYesNo;
    ModalHistory modalHistory;
    string error = string.Empty;
    UserSettings userSettings;
    int currentPage = 1;
    int VisiblePages = 5;
    int Start;
    int Finish;
    int currentSort = 1;
    int pageSize;

    private bool HasPrevious()
    {
        return currentPage > 1 && manPaging.TotalPages > 1;
    }
    private bool HasNext()
    {
        return currentPage < manPaging.TotalPages;
    }

    void CalcPages()
    {
        VisiblePages = 5;
        var half = (int)Math.Floor(VisiblePages / 2d);
        Start = Math.Max(currentPage - half, 1);
        Finish = Math.Min(currentPage + half, manPaging.TotalPages);
        VisiblePages = Math.Min(VisiblePages, manPaging.TotalPages);
        if (Start == 1)
        { Finish = VisiblePages; }
        if (Finish >= manPaging.TotalPages)
        { Start = manPaging.TotalPages - VisiblePages; }
        if (Start < 1)
        { Start = 1; }
    }

    protected override async Task OnInitializedAsync()
    {
        await HeadElementHelper.SetTitleAsync("Производители - Учет техники");
        CurrentUser = (await authenticationStateTask).User;
        await GetData();
    }

    public async Task GetData()
    {
        userSettings = await @Service.GetSettings(_UserManager.GetUserId(CurrentUser), CurrentUser.IsInRole("Admin"));
        pageSize = userSettings.RowsCount;
        categories = await @Service.GetCategoriesAdd();
        GetManuf();
    }

    void GetManuf()
    {
        manPaging = @Service.manPaging(currentSort, currentPage, pageSize);
        CalcPages();
    }

    public void SetPage(int page)
    {
        currentPage = page;
        GetManuf();
    }

    void AddNewMan()
    {
        ModalTitle = "Добавление производителя";
        ModalButton = "Добавить";
        error = string.Empty;
        ct = new ManForm { Id = 0, categories = new Dictionary<string, bool>() };
        foreach (var cat in categories)
        {
            ct.categories.Add(cat.Name, false);
        }
        modal1.Show();
    }

    void SaveMan()
    {
        if (string.IsNullOrEmpty(ct.Name))
        {
            error = "Название не может быть пустым";
            return;
        }
        var check = @Service.CheckManName(ct.Name, ct.Id);
        if (!check.Result)
        {
            error = "Такой производитель уже присутствует в базе";
            return;
        }
        if (ct.Id == 0)
        {
            var result = @Service.CreateManufacturer(ct, CurrentUser.Identity.Name);
        }
        else
        {
            var result = Service.EditManufacturer(ct, CurrentUser.Identity.Name);
        }
        error = string.Empty;
        modal1.Show();
        GetManuf();
    }

    void EditMan(Manufacturer man)
    {
        ModalTitle = "Редактирование производителя";
        ModalButton = "Сохранить";
        error = string.Empty;
        ct = new ManForm { Id = man.Id, Name = man.Name, categories = new Dictionary<string, bool>() };
        List<string> manCats = man.Categories.Select(x => x.Category.Name).ToList();
        foreach (var cat in categories)
        {
            ct.categories.Add(cat.Name, manCats.Contains(cat.Name));
        }
        modal1.Show();
    }

    async void ShowHistoryModal()
    {
        manufacturersHistories = await @Service.GetManufacturerHistories();
        modalHistory.Show();
    }

    void DeleteMan(Manufacturer cat)
    {
        forDel = cat;
        error = string.Empty;
        modalYesNo.Show();
    }

    void Del()
    {
        var result = @Service.DeleteManufacturer(forDel, CurrentUser.Identity.Name);
        error = string.Empty;
        modalYesNo.Show();
        forDel = null;
        GetManuf();
    }

    void SetSort(int sort)
    {
        currentSort = sort;
        currentPage = 1;
        GetManuf();
    }

    string SortClass(int sort1, int sort2)
    {
        if (currentSort == sort1)
        {
            return "fas fa-sort-up";
        }
        else if (currentSort == sort2)
        {
            return "fas fa-sort-down";
        }
        else
        {
            return "fas fa-sort";
        }
    }
}