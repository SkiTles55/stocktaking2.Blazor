@page "/password"
@using stocktaking2.Blazor.Data
@using Microsoft.AspNetCore.Identity;
@using stocktaking2.Blazor.Helpers
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> _UserManager
@inject IHeadElementHelper HeadElementHelper
@inherits OwningComponentBase<DbService>
<AuthorizeView>
    <Authorized>
        <div class="d-sm-flex align-items-center justify-content-between mb-4">
            <h1 class="h3 mb-0 text-gray-800">Смена пароля</h1>
        </div>
        <div class="row">
            <div class="col-xl-8 col-lg-7">
                <div class="card shadow mb-4 border-left-primary">
                    <div class="card-body">
                        <EditForm Model="@model" Context="formContext" OnValidSubmit="@HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <div class="form-group row">
                                <label for="oldpass" class="col-3 col-form-label">Текущий пароль</label>
                                <div class="col">
                                    <InputText type="password" Id="oldpass" Class="form-control" @bind-Value="@model.OldPass"></InputText>
                                    <ValidationMessage For="@(() => model.OldPass)" />
                                </div>
                            </div>
                            <div class="form-group row">
                                <label for="newpass" class="col-3 col-form-label">Новый пароль</label>
                                <div class="col">
                                    <InputText type="password" Id="newpass" Class="form-control" @bind-Value="@model.NewPass"></InputText>
                                    <ValidationMessage For="@(() => model.NewPass)" />
                                </div>
                            </div>
                            <div class="form-group row">
                                <label for="confirmnewpass" class="col-3 col-form-label">Повторите новый пароль</label>
                                <div class="col">
                                    <InputText type="password" Id="confirmnewpass" Class="form-control" @bind-Value="@model.ConfirmNewPass"></InputText>
                                    <ValidationMessage For="@(() => model.ConfirmNewPass)" />
                                </div>
                            </div>
                            <ValidationSummary />
                            <div class="form-group row">
                                <div class="offset-3 col">
                                    @if (!string.IsNullOrEmpty(StatusMessage))
                                    {
                                        <div class="alert @StatusClass">@StatusMessage</div>
                                    }
                                    <button class="btn btn-danger btn-icon-split" type="submit">
                                        <span class="icon text-white-50">
                                            <i class="far fa-save"></i>
                                        </span>
                                        <span class="text">Сменить пароль</span>
                                    </button>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <p>У вас нет доступа в этот раздел</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    PasswordModel model = new PasswordModel();
    IdentityUser CurrentUser;
    private string StatusMessage;
    private string StatusClass;

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await _UserManager.FindByEmailAsync((await authenticationStateTask).User.Identity.Name);
        await HeadElementHelper.SetTitleAsync("Смена пароля - Учет техники");
    }

    protected async void HandleValidSubmit()
    {
        StatusClass = string.Empty;
        StatusMessage = string.Empty;
        if (model.OldPass == model.ConfirmNewPass)
        {
            StatusClass = "alert-danger";
            StatusMessage = "Новый пароль совпадает с текущим.";
            return;
        }
        var result = await _UserManager.ChangePasswordAsync(CurrentUser, model.OldPass, model.ConfirmNewPass);
        if (!result.Succeeded)
        {
            StatusClass = "alert-danger";
            StatusMessage = "Произошла ошибка: " + result.Errors.First().Description;
            StateHasChanged();
            return;
        }
        StatusClass = "alert-success";
        StatusMessage = "Ваш пароль изменен.";
        var history = @Service.AddUserHistoryAsync("Пользователь изменил свой пароль.", CurrentUser.Email);
        StateHasChanged();
    }
}