@page "/emails"
@using stocktaking2.Blazor.Data
@using stocktaking2.Blazor.Data.DB
@using System.Security.Claims
@using stocktaking2.Blazor.Helpers
@using Microsoft.AspNetCore.Identity;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> _UserManager
@inject IJSRuntime JS
@inject IHeadElementHelper HeadElementHelper
@inherits OwningComponentBase<DbService>
<AuthorizeView>
    <Authorized>
        <div class="d-sm-flex align-items-center justify-content-between mb-4">
            <h1 class="h3 mb-0 text-gray-800">Аккаунты Email</h1>
            <ul class="nav justify-content-end">
                @if (@context.User.IsInRole("Admin"))
                {
                    <li class="nav-item">
                        <a class="nav-link active" href="/emails" @onclick="AddNewEmail"><i class="fas fa-plus fa-sm"></i> Добавить аккаунт Email</a>
                    </li>
                }
                <li class="nav-item">
                    <a class="nav-link active" href="/emails" @onclick="Report"><i class="fas fa-download fa-sm"></i> Скачать список</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link active" href="/emails" @onclick="ShowHistoryModal"><i class="fas fa-list fa-sm"></i> История изменений</a>
                </li>
            </ul>
        </div>
        @if (EmailPaging == null)
        {
            <PageLoadingSpinner />
        }
        else
        {
            <div class="card shadow mb-4 border-left-primary">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered" id="DataTable" width="100%" cellspacing="0">
                            <thead>
                                <tr>
                                    <th><a href="Emails/" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 1 ? 2 : 1))"><i class="@SortClass(1, 2)"></i> Адрес</a></th>
                                    @if (@context.User.IsInRole("Admin"))
                                    {
                                        <th><a href="Emails/" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 3 ? 4 : 3))"><i class="@SortClass(3, 4)"></i> Пароль</a></th>
                                    }
                                    <th>
                                        <a href="Emails/" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 5 ? 6 : 5))"><i class="@SortClass(5, 6)"></i> Сотрудник</a>
                                        <select class="form-control form-control-sm" @onchange="@EmpFilter">
                                            <option value="0" selected="selected">Все</option>
                                            @foreach (var option in employers)
                                            {
                                                <option value="@option.Id">
                                                    @option.Name
                                                </option>
                                            }
                                        </select>
                                    </th>
                                    @if (@context.User.IsInRole("Admin"))
                                    {
                                        <th></th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var one in EmailPaging.Emails)
                                {
                                    <tr>
                                        <td>@one.Login</td>
                                        @if (@context.User.IsInRole("Admin"))
                                        {
                                            <td>@one.Password</td>
                                        }
                                        <td>@one.Employer?.Name</td>
                                        @if (@context.User.IsInRole("Admin"))
                                        {
                                            <td>
                                                <button class="btn btn-primary btn-circle" title="Редактировать" @onclick="(() => EditEmail(one))">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-danger btn-circle" title="Удалить" @onclick="(() => DeleteEmail(one))">
                                                    <i class="far fa-trash-alt"></i>
                                                </button>
                                            </td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <div class="d-sm-flex align-items-center justify-content-between">
                            <p>Всего аккаунтов: @EmailPaging.TotalCount</p>
                            @if (EmailPaging.TotalPages > 1)
                            {
                                <ul class="pagination">
                                    @if (HasPrevious())
                                    {
                                        <li class="page-item">
                                            <button class="page-link" @onclick="(()=>SetPage(currentPage - 1))">&laquo;  Назад</button>
                                        </li>
                                    }
                                    else
                                    {
                                        <li class="page-item disabled">
                                            <a class="page-link" aria-disabled="true">&laquo;  Назад</a>
                                        </li>
                                    }
                                    @if (Start > 1)
                                    {
                                        <li class="page-item">
                                            <button class="page-link" @onclick="(()=>SetPage(1))">1</button>
                                        </li>
                                    }
                                    @if (Start > 2)
                                    {
                                        <li class="page-item disabled">
                                            <a class="page-link" aria-disabled="true">...</a>
                                        </li>
                                    }
                                    @for (var i = Start; i <= Finish; i++)
                                    {
                                        var temp = i;
                                        if (i == currentPage)
                                        {
                                            <li class="page-item active">
                                                <span class="page-link">
                                                    @i
                                                    <span class="sr-only">(current)</span>
                                                </span>
                                            </li>
                                        }
                                        else
                                        {
                                            <li class="page-item">
                                                <button class="page-link" @onclick="(()=>SetPage(temp))">@i</button>
                                            </li>
                                        }
                                    }
                                    @if (Finish < EmailPaging.TotalPages)
                                    {
                                        <li class="page-item disabled">
                                            <a class="page-link" aria-disabled="true">...</a>
                                        </li>
                                    }
                                    @if (Finish < EmailPaging.TotalPages)
                                    {
                                        <li class="page-item">
                                            <button class="page-link" @onclick="(()=>SetPage(EmailPaging.TotalPages))">@EmailPaging.TotalPages</button>
                                        </li>
                                    }
                                    @if (HasNext())
                                    {
                                        <li class="page-item">
                                            <button class="page-link" @onclick="(()=>SetPage(currentPage + 1))">Вперед  &raquo;</button>
                                        </li>
                                    }
                                    else
                                    {
                                        <li class="page-item disabled">
                                            <a class="page-link" aria-disabled="true">Вперед  &raquo;</a>
                                        </li>
                                    }
                                </ul>
                            }
                        </div>
                    </div>
                </div>
            </div>
            @if (@context.User.IsInRole("Admin"))
            {
                <ModalWindow @ref="modal1" Title="@ModalTitle" ModalButtonOK="@ModalButton" OnClick="(() => SaveEmail())">
                    <div class="form-group row">
                        <label for="login" class="col-3 col-form-label">Адрес</label>
                        <div class="col">
                            <input id="login" name="text" type="text" class="form-control" @bind="@emedit.Login">
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="pass" class="col-3 col-form-label">Пароль</label>
                        <div class="col">
                            <input id="pass" name="text" type="text" class="form-control" @bind="@emedit.Password">
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="emp" class="col-3 col-form-label">Сотрудник</label>
                        <div class="col">
                            <Typeahead SearchMethod="SearchEmp"
                                       ConvertMethod="ConvertEmp"
                                       Items="employers"
                                       @bind-Value="emedit.EmployerId"
                                       Placeholder="Выберите сотрудника"
                                       SearchPlaceholder="Поиск">
                                <SelectedTemplate Context="empId">
                                    @LookupEmp(empId)?.Name
                                </SelectedTemplate>
                                <ResultTemplate Context="emp">
                                    @emp.Name
                                </ResultTemplate>
                            </Typeahead>
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(error))
                    {
                        <div class="alert alert-danger" role="alert">
                            <i class="fas fa-exclamation-circle"></i> @error
                        </div>
                    }
                </ModalWindow>
                <ModalYesNoDialog @ref="modalYesNo" OnClick="() => Del()">
                    <div class="form-group">
                        <p>Действительно хотите удалить этот аккаунт?</p>
                        <h3>@emForDel.Login</h3>
                    </div>
                </ModalYesNoDialog>
            }
            <ModalHistory @ref="modalHistory">
                <div style="overflow: auto; max-height:500px;">
                    @if (EmailHistories == null)
                    {
                        <p>Данные загружаются...</p>
                    }
                    else
                    {
                        @foreach (var cH in EmailHistories)
                        {
                            <div class="alert alert-secondary" role="alert">
                                <p>Время: <b>@cH.Time.ToString("dd.MM.yyyy HH:mm")</b></p>
                                <p>Пользователь: <b>@cH.UserName</b></p>
                                <p class="font-weight-bold">@cH.Changes</p>
                            </div>
                        }
                    }
                </div>
            </ModalHistory>
            <ModalReport @ref="modalReport" Title="Скачать список аккаунтов Email" OnClick="DownloadReport">
                <div class="form-group row">
                    <label for="Hcolor" class="col-4 col-form-label">Цвет заголовка таблицы</label>
                    <div class="col">
                        <input id="Hcolor" type="color" class="form-control" @bind="@emailReport.HeaderColor">
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-4">Текст заголовка таблицы</div>
                    <div class="col">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="HboldCheck" @bind="@emailReport.HeaderBold">
                            <label class="form-check-label" for="HboldCheck">
                                Жирный текст
                            </label>
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <label for="Ecolor" class="col-4 col-form-label">Цвет столбца "Сотрудник"</label>
                    <div class="col">
                        <input id="Ecolor" type="color" class="form-control" @bind="@emailReport.EmployerColor">
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-4">Текст столбца "Сотрудник"</div>
                    <div class="col">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="EboldCheck" @bind="@emailReport.EmployerBold">
                            <label class="form-check-label" for="EboldCheck">
                                Жирный текст
                            </label>
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-4">Текст столбца "Email"</div>
                    <div class="col">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="EmboldCheck" @bind="@emailReport.EmailBold">
                            <label class="form-check-label" for="EmboldCheck">
                                Жирный текст
                            </label>
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <label for="Ccolor" class="col-4 col-form-label">Цвет строк таблицы</label>
                    <div class="col">
                        <input id="Ccolor" type="color" class="form-control" @bind="@emailReport.CellsColor">
                    </div>
                </div>
                @if (@context.User.IsInRole("Admin"))
                {
                    <div class="form-group row">
                        <div class="col-4">Пароли аккаунтов</div>
                        <div class="col">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="PassCheck" @bind="@emailReport.Password">
                                <label class="form-check-label" for="PassCheck">
                                    Отображать
                                </label>
                            </div>
                        </div>
                    </div>
                }
            </ModalReport>
        }
    </Authorized>
    <NotAuthorized>
        <p>У вас нет доступа в этот раздел</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    List<EmailHistory> EmailHistories = new List<EmailHistory>();
    List<Employer> employers = new List<Employer>();
    ClaimsPrincipal CurrentUser = new ClaimsPrincipal();
    string ModalTitle = "Редактирование аккаунта Email";
    string ModalButton = "Сохранить";
    Email emedit = new Email();
    Email emForDel = new Email();
    ModalWindow modal1;
    ModalYesNoDialog modalYesNo;
    ModalHistory modalHistory;
    string error = string.Empty;
    UserSettings userSettings;
    int currentPage = 1;
    int VisiblePages = 5;
    int Start;
    int Finish;
    int currentSort = 1;
    int pageSize;
    int empFilter = 0;
    EmailPaging EmailPaging;
    ModalReport modalReport;
    EmailReport emailReport;

    private bool HasPrevious()
    {
        return currentPage > 1 && EmailPaging.TotalPages > 1;
    }
    private bool HasNext()
    {
        return currentPage < EmailPaging.TotalPages;
    }

    void CalcPages()
    {
        VisiblePages = 5;
        var half = (int)Math.Floor(VisiblePages / 2d);
        Start = Math.Max(currentPage - half, 1);
        Finish = Math.Min(currentPage + half, EmailPaging.TotalPages);
        VisiblePages = Math.Min(VisiblePages, EmailPaging.TotalPages);
        if (Start == 1)
        { Finish = VisiblePages; }
        if (Finish >= EmailPaging.TotalPages)
        { Start = EmailPaging.TotalPages - VisiblePages; }
        if (Start < 1)
        { Start = 1; }
    }

    protected override async Task OnInitializedAsync()
    {
        await HeadElementHelper.SetTitleAsync("Аккаунты Email - Учет техники");
        CurrentUser = (await authenticationStateTask).User;
        await GetData();
    }

    public async Task GetData()
    {
        userSettings = await @Service.GetSettings(_UserManager.GetUserId(CurrentUser), CurrentUser.IsInRole("Admin"));
        pageSize = userSettings.RowsCount;
        employers = await @Service.GetEmployersAdd();
        GetEmails();
    }

    void GetEmails()
    {
        EmailPaging = @Service.EmailPaging(currentSort, currentPage, pageSize, empFilter);
        CalcPages();
    }

    public void SetPage(int page)
    {
        currentPage = page;
        GetEmails();
    }

    void AddNewEmail()
    {
        ModalTitle = "Добавление аккаунта Email";
        ModalButton = "Добавить";
        error = string.Empty;
        emedit = new Email { Id = 0 };
        modal1.Show();
    }

    void EditEmail(Email cat)
    {
        ModalTitle = "Редактирование аккаунта Email";
        ModalButton = "Сохранить";
        error = string.Empty;
        emedit = new Email
        {
            Id = cat.Id,
            Login = cat.Login,
            Password = cat.Password,
            EmployerId = cat.EmployerId
        };
        modal1.Show();
    }

    void SaveEmail()
    {
        if (string.IsNullOrEmpty(emedit.Login))
        {
            error = "Введите адрес";
            return;
        }
        var check = @Service.CheckEmailAddress(emedit.Login, emedit.Id);
        if (!check.Result)
        {
            error = "Такой аккаунт email уже присутствует в базе";
            return;
        }
        if (emedit.Id == 0)
        {
            var result = @Service.CreateEmail(emedit, CurrentUser.Identity.Name);
        }
        else
        {
            var result = @Service.EditEmail(emedit, CurrentUser.Identity.Name);
        }
        error = string.Empty;
        modal1.Show();
        GetEmails();
    }

    void DeleteEmail(Email cat)
    {
        emForDel = cat;
        error = string.Empty;
        modalYesNo.Show();
    }

    void Del()
    {
        var result = @Service.DeleteEmail(emForDel, CurrentUser.Identity.Name);
        error = string.Empty;
        modalYesNo.Show();
        emForDel = null;
        GetEmails();
    }

    async void ShowHistoryModal()
    {
        EmailHistories = await @Service.GetEmailHistories();
        modalHistory.Show();
    }

    void EmpFilter(ChangeEventArgs e)
    {
        empFilter = Convert.ToInt32(e.Value);
        currentPage = 1;
        GetEmails();
    }

    void SetSort(int sort)
    {
        currentSort = sort;
        currentPage = 1;
        GetEmails();
    }

    string SortClass(int sort1, int sort2)
    {
        if (currentSort == sort1)
        {
            return "fas fa-sort-up";
        }
        else if (currentSort == sort2)
        {
            return "fas fa-sort-down";
        }
        else
        {
            return "fas fa-sort";
        }
    }

    void Report()
    {
        emailReport = new EmailReport
        {
            CellsColor = "#b7e1cd",
            EmailBold = false,
            EmployerBold = true,
            EmployerColor = "#b8cce4",
            HeaderColor = "#ffbf00",
            HeaderBold = true,
            Password = false
        };
        modalReport.Show();
    }

    void DownloadReport()
    {
        modalReport.StartWork();
        var report = @Service.EmailsReport(emailReport);
        JS.SaveAs($"emails-{DateTime.Now.ToString("d")}.xlsx", report);
        modalReport.Show();
    }

    public async Task<IEnumerable<Employer>> SearchEmp(string searchText)
    {
        var result = employers
            .Where(x => x.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .ToList();

        return await Task.FromResult(result);
    }

    public int? ConvertEmp(Employer emp)
    {
        return emp?.Id;
    }

    public Employer LookupEmp(int? id)
    {
        return employers.FirstOrDefault(p => p.Id == id);
    }
}