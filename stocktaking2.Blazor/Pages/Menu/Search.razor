@page "/search/{text}"
@using Microsoft.AspNetCore.Components.Authorization
@using stocktaking2.Blazor.Data
@using stocktaking2.Blazor.Data.DB
@using stocktaking2.Blazor.Helpers
@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims
@using System.Globalization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> _UserManager
@inject IHeadElementHelper HeadElementHelper
@inject NavigationManager MyNavigationManager
@inherits OwningComponentBase<DbService>
<AuthorizeView>
    <Authorized>
        <div class="d-sm-flex align-items-center justify-content-between mb-4">
            <h1 class="h3 mb-0 text-gray-800">@title</h1>
        </div>
        @if (unitsPaging == null)
        {
            <PageLoadingSpinner />
        }
        else
        {
            <div class="card shadow mb-4 border-left-primary">
                <div class="card-body">
                    <div class="row">
                        @if (unitsPaging.TotalCount > 0)
                        {
                            <div class="table-responsive">
                                <table class="table table-bordered" id="DataTable" width="100%" cellspacing="0">
                                    <thead>
                                        <tr>
                                            @foreach (var col in Collumns)
                                            {
                                                <th>
                                                    @switch (col)
                                                    {
                                                        case "status":
                                                            <a href="search/@text" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 25 ? 26 : 25))"><i class="@SortClass(25, 26)"></i> @TableSettings.Collumns[col]</a>
                                                            break;
                                                        case "category":
                                                            <a href="search/@text" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 3 ? 4 : 3))"><i class="@SortClass(3, 4)"></i> @TableSettings.Collumns[col]</a>
                                                            break;
                                                        case "man":
                                                            <a href="search/@text" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 15 ? 16 : 15))"><i class="@SortClass(15, 16)"></i> @TableSettings.Collumns[col]</a>
                                                            break;
                                                        case "model":
                                                            <a href="search/@text" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 17 ? 18 : 17))"><i class="@SortClass(17, 18)"></i> @TableSettings.Collumns[col]</a>
                                                            break;
                                                        case "location":
                                                            <a href="search/@text" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 13 ? 14 : 13))"><i class="@SortClass(13, 14)"></i> @TableSettings.Collumns[col]</a>
                                                            break;
                                                        case "invent":
                                                            <a href="search/@text" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 11 ? 12 : 11))"><i class="@SortClass(11, 12)"></i> @TableSettings.Collumns[col]</a>
                                                            break;
                                                        case "serial":
                                                            <a href="search/@text" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 21 ? 22 : 21))"><i class="@SortClass(21, 22)"></i> @TableSettings.Collumns[col]</a>
                                                            break;
                                                        case "buydate":
                                                            <a href="search/@text" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 27 ? 28 : 27))"><i class="@SortClass(27, 28)"></i> @TableSettings.Collumns[col]</a>
                                                            break;
                                                        case "installdate":
                                                            <a href="search/@text" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 9 ? 10 : 9))"><i class="@SortClass(9, 10)"></i> @TableSettings.Collumns[col]</a>
                                                            break;
                                                        case "employer":
                                                            <a href="search/@text" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 7 ? 8 : 7))"><i class="@SortClass(7, 8)"></i> @TableSettings.Collumns[col]</a>
                                                            break;
                                                        case "departament":
                                                            <a href="search/@text" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 5 ? 6 : 5))"><i class="@SortClass(5, 6)"></i> @TableSettings.Collumns[col]</a>
                                                            break;
                                                        case "winname":
                                                            <a href="search/@text" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 29 ? 30 : 29))"><i class="@SortClass(29, 30)"></i> @TableSettings.Collumns[col]</a>
                                                            break;
                                                        case "processor":
                                                            <a href="search/@text" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 31 ? 32 : 31))"><i class="@SortClass(31, 32)"></i> @TableSettings.Collumns[col]</a>
                                                            break;
                                                        case "motherboard":
                                                            <a href="search/@text" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 33 ? 34 : 33))"><i class="@SortClass(33, 34)"></i> @TableSettings.Collumns[col]</a>
                                                            break;
                                                        case "DDR":
                                                            <a href="search/@text" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 35 ? 36 : 35))"><i class="@SortClass(35, 36)"></i> @TableSettings.Collumns[col]</a>
                                                            break;
                                                        case "specs":
                                                            <a href="search/@text" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 23 ? 24 : 23))"><i class="@SortClass(23, 24)"></i> @TableSettings.Collumns[col]</a>
                                                            break;
                                                        case "cartridgemodel":
                                                            <a href="search/@text" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 37 ? 38 : 37))"><i class="@SortClass(37, 38)"></i> @TableSettings.Collumns[col]</a>
                                                            break;
                                                        case "cartridgecount":
                                                            <a href="search/@text" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 39 ? 40 : 39))"><i class="@SortClass(39, 40)"></i> @TableSettings.Collumns[col]</a>
                                                            break;
                                                        case "ipadresses":
                                                            if (@context.User.IsInRole("Admin"))
                                                            {
                                                                <a href="search/@text" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 43 ? 44 : 43))"><i class="@SortClass(43, 44)"></i> @TableSettings.Collumns[col]</a>
                                                            }
                                                            break;
                                                        case "netname":
                                                            if (@context.User.IsInRole("Admin"))
                                                            {
                                                                <a href="search/@text" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 19 ? 20 : 19))"><i class="@SortClass(19, 20)"></i> @TableSettings.Collumns[col]</a>
                                                            }
                                                            break;
                                                        case "biospass":
                                                            if (@context.User.IsInRole("Admin"))
                                                            {
                                                                <a href="search/@text" class="text-decoration-none" @onclick="(()=>SetSort(currentSort == 41 ? 42 : 41))"><i class="@SortClass(41, 42)"></i> @TableSettings.Collumns[col]</a>
                                                            }
                                                            break;
                                                    }
                                                </th>
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var one in unitsPaging.Units)
                                        {
                                            <tr class="tr-link" @onclick="@(() => OpenUnit(one))">
                                                @foreach (var col in Collumns)
                                                {
                                                    <td>
                                                        @switch (col)
                                                        {
                                                            case "status":
                                                                @one.UnitStatus.Name
                                                                break;
                                                            case "category":
                                                                @one.Category.Name
                                                                break;
                                                            case "man":
                                                                @one.Manufacturer?.Name
                                                                break;
                                                            case "model":
                                                                <a href="/unit/@one.Id" class="text-decoration-none">@(!string.IsNullOrEmpty(one.Model) ? one.Model : "Не указана")</a>
                                                                break;
                                                            case "location":
                                                                @one.Location
                                                                break;
                                                            case "invent":
                                                                @one.InventId
                                                                break;
                                                            case "serial":
                                                                @one.Serial
                                                                break;
                                                            case "buydate":
                                                                @one.BuyDate?.ToString("d", CultureInfo.CreateSpecificCulture("ru-RU"))
                                                                break;
                                                            case "installdate":
                                                                @one.InstallDate?.ToString("d", CultureInfo.CreateSpecificCulture("ru-RU"))
                                                                break;
                                                            case "employer":
                                                                @one.Employer?.Name
                                                                break;
                                                            case "departament":
                                                                @one.Departament?.Name
                                                                break;
                                                            case "winname":
                                                                @one.WinName?.Name
                                                                break;
                                                            case "processor":
                                                                @one.Processor
                                                                break;
                                                            case "motherboard":
                                                                @one.Motherboard
                                                                break;
                                                            case "DDR":
                                                                @one.DDR
                                                                break;
                                                            case "specs":
                                                                @one.Specs
                                                                break;
                                                            case "cartridgemodel":
                                                                @one.CartridgeModel
                                                                break;
                                                            case "cartridgecount":
                                                                @one.CartridgeCount;
                                                                break;
                                                            case "ipadresses":
                                                                if (@context.User.IsInRole("Admin"))
                                                                {
                                                                    @string.Join(", ", one.IPAdresses.OrderBy(x => x.IPAddress.ToString()).Select(x => x.IPAddress.ToString()))
                                                                }
                                                                break;
                                                            case "netname":
                                                                if (@context.User.IsInRole("Admin"))
                                                                {
                                                                    @one.NetName
                                                                }
                                                                break;
                                                            case "biospass":
                                                                if (@context.User.IsInRole("Admin"))
                                                                {
                                                                    @one.BiosPass
                                                                }
                                                                break;
                                                        }
                                                    </td>
                                                }
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                                <div class="d-sm-flex align-items-center justify-content-between">
                                    <p>Всего техники: @unitsPaging.TotalCount</p>
                                    @if (unitsPaging.TotalPages > 1)
                                    {
                                        <ul class="pagination">
                                            @if (HasPrevious())
                                            {
                                                <li class="page-item">
                                                    <button class="page-link" @onclick="(()=>SetPage(currentPage - 1))">&laquo;  Назад</button>
                                                </li>
                                            }
                                            else
                                            {
                                                <li class="page-item disabled">
                                                    <a class="page-link" aria-disabled="true">&laquo;  Назад</a>
                                                </li>
                                            }
                                            @if (Start > 1)
                                            {
                                                <li class="page-item">
                                                    <button class="page-link" @onclick="(()=>SetPage(1))">1</button>
                                                </li>
                                            }
                                            @if (Start > 2)
                                            {
                                                <li class="page-item disabled">
                                                    <a class="page-link" aria-disabled="true">...</a>
                                                </li>
                                            }
                                            @for (var i = Start; i <= Finish; i++)
                                            {
                                                var temp = i;
                                                if (i == currentPage)
                                                {
                                                    <li class="page-item active">
                                                        <span class="page-link">
                                                            @i
                                                            <span class="sr-only">(current)</span>
                                                        </span>
                                                    </li>
                                                }
                                                else
                                                {
                                                    <li class="page-item">
                                                        <button class="page-link" @onclick="(()=>SetPage(temp))">@i</button>
                                                    </li>
                                                }
                                            }
                                            @if (Finish < unitsPaging.TotalPages)
                                            {
                                                <li class="page-item disabled">
                                                    <a class="page-link" aria-disabled="true">...</a>
                                                </li>
                                            }
                                            @if (Finish < unitsPaging.TotalPages)
                                            {
                                                <li class="page-item">
                                                    <button class="page-link" @onclick="(()=>SetPage(unitsPaging.TotalPages))">@unitsPaging.TotalPages</button>
                                                </li>
                                            }
                                            @if (HasNext())
                                            {
                                                <li class="page-item">
                                                    <button class="page-link" @onclick="(()=>SetPage(currentPage + 1))">Вперед  &raquo;</button>
                                                </li>
                                            }
                                            else
                                            {
                                                <li class="page-item disabled">
                                                    <a class="page-link" aria-disabled="true">Вперед  &raquo;</a>
                                                </li>
                                            }
                                        </ul>
                                    }
                                </div>
                            </div>
                        }
                        else
                        {
                            <h3>Ничего не найдено</h3>
                        }
                    </div>
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <p>У вас нет доступа в этот раздел</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    [Parameter]
    public string text { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    const string quote = "\"";
    ClaimsPrincipal CurrentUser = new ClaimsPrincipal();
    UserSettings userSettings;
    List<string> Collumns;
    int currentPage = 1;
    int VisiblePages = 5;
    int Start;
    int Finish;
    int? currentSort;
    UnitsPaging unitsPaging;
    List<Category> categories;
    int catFilter = 0;
    List<Departament> departaments;
    int depFilter = 0;
    List<Employer> employers;
    int empFilter = 0;
    List<Manufacturer> manufacturers;
    int manFilter = 0;
    List<UnitStatus> statuses;
    int statFilter = 0;
    string title = "Результаты поиска";

    protected override async Task OnInitializedAsync()
    {
        title = "Поиск " + quote + text + quote + " - Учет техники";
        await HeadElementHelper.SetTitleAsync("Поиск " + quote + text + quote + " - Учет техники");
        CurrentUser = (await authenticationStateTask).User;
        await GetData();
        title = "Результаты поиска " + quote + text + quote + " - Учет техники";
        await HeadElementHelper.SetTitleAsync("Результаты поиска " + quote + text + quote + " - Учет техники");
    }

    private bool HasPrevious()
    {
        return currentPage > 1 && unitsPaging.TotalPages > 1;
    }
    private bool HasNext()
    {
        return currentPage < unitsPaging.TotalPages;
    }

    void CalcPages()
    {
        VisiblePages = 5;
        var half = (int)Math.Floor(VisiblePages / 2d);
        Start = Math.Max(currentPage - half, 1);
        Finish = Math.Min(currentPage + half, unitsPaging.TotalPages);
        VisiblePages = Math.Min(VisiblePages, unitsPaging.TotalPages);
        if (Start == 1)
        { Finish = VisiblePages; }
        if (Finish >= unitsPaging.TotalPages)
        { Start = unitsPaging.TotalPages - VisiblePages; }
        if (Start < 1)
        { Start = 1; }
    }

    public async Task GetData()
    {
        userSettings = await @Service.GetSettings(_UserManager.GetUserId(CurrentUser), CurrentUser.IsInRole("Admin"));
        if (currentSort == null) currentSort = userSettings.SortOrder;
        Collumns = TableSettings.DeserializeSettings(userSettings.CollumnSettings);
        categories = await @Service.CategoriesList();
        departaments = await @Service.GetDepartamentsAdd();
        employers = await @Service.GetEmployersAdd();
        manufacturers = await @Service.GetManufacturersAdd();
        statuses = await @Service.GetStatusesForAdd();
        GetUnits();
    }

    void GetUnits()
    {
        if (CurrentUser.IsInRole("Admin"))
            unitsPaging = @Service.adminSearch(currentSort ?? 1, currentPage, userSettings.RowsCount, catFilter, depFilter, empFilter, manFilter, statFilter, text);
        else
            unitsPaging = @Service.userSearch(currentSort ?? 1, currentPage, userSettings.RowsCount, catFilter, depFilter, empFilter, manFilter, statFilter, text);
        CalcPages();
    }

    public void SetPage(int page)
    {
        currentPage = page;
        GetUnits();
    }

    void CatFilter(ChangeEventArgs e)
    {
        catFilter = Convert.ToInt32(e.Value);
        currentPage = 1;
        GetUnits();
    }

    void DepFilter(ChangeEventArgs e)
    {
        depFilter = Convert.ToInt32(e.Value);
        currentPage = 1;
        GetUnits();
    }

    void EmpFilter(ChangeEventArgs e)
    {
        empFilter = Convert.ToInt32(e.Value);
        currentPage = 1;
        GetUnits();
    }

    void ManFilter(ChangeEventArgs e)
    {
        manFilter = Convert.ToInt32(e.Value);
        currentPage = 1;
        GetUnits();
    }

    void StatusFilter(ChangeEventArgs e)
    {
        statFilter = Convert.ToInt32(e.Value);
        currentPage = 1;
        GetUnits();
    }

    void SetSort(int sort)
    {
        currentSort = sort;
        currentPage = 1;
        GetUnits();
    }

    string SortClass(int sort1, int sort2)
    {
        if (currentSort == sort1)
        {
            return "fas fa-sort-up";
        }
        else if (currentSort == sort2)
        {
            return "fas fa-sort-down";
        }
        else
        {
            return "fas fa-sort";
        }
    }

    void OpenUnit(Unit unit)
    {
        MyNavigationManager.NavigateTo("unit/" + unit.Id);
    }
}